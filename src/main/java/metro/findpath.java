/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package metro;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import metro_system.convar;

/**
 *
 * @author
 */
public class findpath extends javax.swing.JInternalFrame implements convar {
    
    /**
     * Creates new form viewdelivery
     */
    public findpath() {
        initComponents();
        loadInitStation();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Find Path");
        setPreferredSize(new java.awt.Dimension(1171, 700));

        jButton1.setText("Find path");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("From");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("To");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(jLabel3)
                        .addGap(43, 43, 43)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(347, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(52, 52, 52)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(427, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadInitStation() {                                         

        Connection myconnection;
       
       try
       {
           myconnection=DriverManager.getConnection(path+place, username, password);
           try
           {
                 String query="SELECT `stn_name` FROM `stationtable`";
                 PreparedStatement mystatement=myconnection.prepareStatement(query);
                 ResultSet myres = mystatement.executeQuery();
                 if(myres.next())
                 {
                      do
                      {
                          jComboBox1.addItem(myres.getString("stn_name"));
                          jComboBox2.addItem(myres.getString("stn_name"));
                      }
                      while(myres.next());
                }
           }
           catch(Exception e)
           {
               JOptionPane.showMessageDialog(rootPane, "Deletion Error:"+e.getMessage());
           }
           finally
           {
               myconnection.close();
           }
           
       }
       catch(Exception e)
       {
           JOptionPane.showMessageDialog(rootPane, "Connection Error:"+e.getMessage());
       }
     
    }    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Connection myconnection;
       
       try
       {
           myconnection=DriverManager.getConnection(path+place, username, password);
           try
           {
               // get startStation, and end Station
                String startStation = jComboBox1.getSelectedItem().toString();
                String endStation = jComboBox2.getSelectedItem().toString();
                
               // get full station table and convert to List<Pair> stationRoutePairs
                List<Pair> stationRoutePairs = new ArrayList<>();
                 String query="SELECT * FROM `stationtable`";
                 PreparedStatement mystatement=myconnection.prepareStatement(query);
                 ResultSet myres = mystatement.executeQuery();
                 if(myres.next())
                 {
                      do
                      {
                          String station = myres.getString("stn_name");
                          String route  = myres.getString("Route");
                          stationRoutePairs.add(new Pair(station, route));

                      }
                      while(myres.next());
                }
                 
                 // call findpath
                 List<String> path = findPath(stationRoutePairs,startStation, endStation );
                 // show in GUI
                 jLabel1.setText("path : " + path);
           }
           catch(Exception e)
           {
               JOptionPane.showMessageDialog(rootPane, "Deletion Error:"+e.getMessage());
           }
           finally
           {
               myconnection.close();
           }
           
       }
       catch(Exception e)
       {
           JOptionPane.showMessageDialog(rootPane, "Connection Error:"+e.getMessage());
       }
     
    }//GEN-LAST:event_jButton1ActionPerformed

    public static Map<String, List<String>> make_Route_Stations (List<Pair> stationRoutePairs) {
        Map<String, List<String>> graph = new HashMap<>();
        for (Pair pair : stationRoutePairs) {
            graph.computeIfAbsent(pair.route, k -> new ArrayList<>()).add(pair.station);
        }
        return graph;
    }
    
    public static Map<String, List<String>> make_Station_Routes (List<Pair> stationRoutePairs) {
        Map<String, List<String>> graph = new HashMap<>();
        for (Pair pair : stationRoutePairs) {
            graph.computeIfAbsent(pair.station, k -> new ArrayList<>()).add(pair.route);
        }
        return graph;
    }

    // format path : station, route, station next, route next, station next
    public static List<String> findPath(List<Pair> stationRoutePairs, String startStation, String endStation) {
        
        // get key has startStation and key has endStation
        Map<String, List<String>> mapStation_Routes = make_Station_Routes(stationRoutePairs);
        List<String> routeStarts = mapStation_Routes.get(startStation);
        List<String> routeEnds = mapStation_Routes.get(endStation);
        
        // get list Station in route
        // asssume : routeStarts and routeEnds has one element
        Map<String, List<String>> mapRoute_Stations = make_Route_Stations(stationRoutePairs);
        List<String> ListStationStart = mapRoute_Stations.get(routeStarts.get(0));
        List<String> ListStationEnd = mapRoute_Stations.get(routeEnds.get(0));
        
        // get common station have in 2 list key
        // assume : common station have one element
        List<String> commonElements = findCommonElements(ListStationStart, ListStationEnd);
        
        // return list <string> start - common station - end 
        List<String> path = new ArrayList<String>();
        path.add(startStation);
        path.add(routeStarts.get(0));
        path.add(commonElements.get(0));
        path.add(routeEnds.get(0));
        path.add(endStation);
        
        return path;
    }

    
    public static List<String> findCommonElements(List<String> list1, List<String> list2) {
        Set<String> set1 = new HashSet<>(list1);
        Set<String> set2 = new HashSet<>(list2);

        set1.retainAll(set2);

        return new ArrayList<>(set1);
    }
    
    private class Pair {
        String station;
        String route;

        Pair(String station, String route) {
            this.station = station;
            this.route = route;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
